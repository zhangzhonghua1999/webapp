API就是把Web App的功能全部封装了，所以，，通过API操作数据，可以极大地把前端和后端的代码隔离，
使得后端代码易于测试，前端代码编写更简单。一个API也是一个URL的处理函数，我们希望能直接通过一个
@api来把函数变成JSON格式的REST API，这样，获取注册用户可以用一个API实现如下：

@get('/api/users')
def api_get_users(*,page='1'):
    page_index = get_page_index(page)
    num = await User.findNumber('count(id)')
    p=Page(num,page_index)
    if num == 0:
        return dict(page=p, users=())
    users = await User.findAll(orderBy='create_at desc', limit = (p.offset,p.limit))
    for u in users:
        u.passwd='*******'
    return dict(page=p,users=users)

只要返回一个dict，后续的response这个middleware就可以把结果序列化为JSON并返回。
以下是所有网站所需要的后端API, 前端页面URL的列表：

后端API包括：

获取日志：GET /api/blogs
创建日志：POST /api/blogs
修改日志：POST /api/blogs/:blog_id
删除日志：POST /api/blogs/:blog_id/delete
获取评论：GET /api/comments
创建评论：POST /api/blogs/:blog_id/comments
删除评论：POST /api/comments/:comment_id/delete
创建新用户：POST /api/users
获取用户：GET /api/users

管理页面包括：

评论列表页：GET /manage/comments
日志列表页：GET /manage/blogs
创建日志页：GET /manage/blogs/create
修改日志页：GET /manage/blogs/
用户列表页：GET /manage/users


用户浏览页面包括：

注册页：GET /register
登录页：GET /signin
注销页：GET /signout
首页：GET /
日志详情页：GET /blog/:blog_id