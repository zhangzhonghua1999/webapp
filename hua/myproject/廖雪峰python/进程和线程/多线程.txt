线程：实现多任务的另一种方式
一个进程中，也经常需要同时做多见识，就需要同时运行对各“子任务”，这些子任务就是线程
线程又被称为轻量级线程（lightweight process），是更小的执行单元
    一个进程可以有多个并行的（concurrent）线程，当中每一个线程，共享当前进程的资源。
    一个进程中的线程共享相同的内存单元/内存地址空间——》可以访问相同的变量和对象，而且从同一堆中分配对象-》通信、数据交换、同步操作
    由于线程间的通信是在同一地址空间上进行的，所以不需要额外的通信机制，这就使得通信更简便而且信息传递速度更快
任何进程都会默认启动一个线程，这个线程称为主线程，主线程可以启动新的子线程
current_thread():返回当前线程的实例
.name 当前线程的名称
print('主线程%s启动' % (threading.current_thread().name))

线程和进程的区别

●进程是系统进行资源分配和调度的一个独立单位

●进程在执行过程中拥有独立的内存单元后而多个线程共享内存,从而极大地提高了程序的运行效率

●一个程序至少有一个进程，一个进程至少有一个线程

●线程是进程的一个实体是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位

●线程自己基本_上不拥有系统资源只拥有一点在运行中必不可少的资源 ,但是它
 同属一个进程的其他的线程共享进程所拥有的全部资源

●线程的划分尺度小于进程(资源比进程少)，使得多线程程序的并发性高

●线程不能够独立执行,必须依存在进程中

●线程和进程在使用上各有优缺点:线程执行开销小,但不利于资源的管理和保护;而进程正相反


